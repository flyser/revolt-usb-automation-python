#!/usr/bin/python
#
# Script to control the revolt-power px-1672 outlets via usb with the provided dongle.

#based on the pyusb tutorial script

import usb.core
import usb.util
import binascii
import sys

# the original software knows 3 parameters
# Bit Width 100+6*50 seems not to be used, doesn't change the message
#Fame 3-255
#ID 0-65535


MSG_FRAME = "0A" # 10 in Hex
MSG_ID = "1A85" # 6789 in hex
MSG_ACTION = "" # to be set later
MSG_UNKNOWN_PADDING = "10"

MSG_FIN = "0000" # unknown, not relevant

if len(sys.argv) <2:
  raise ValueError('no action specified')


if sys.argv[1]=="on1":
  MSG_ACTION = "F070"
elif sys.argv[1]=="off1":
  MSG_ACTION = "E080"
elif sys.argv[1]=="on2":
  MSG_ACTION = "D090"
elif sys.argv[1]=="off2":
  MSG_ACTION = "C0A0"
elif sys.argv[1]=="on3":
  MSG_ACTION = "B0B0"
elif sys.argv[1]=="off3":
  MSG_ACTION = "A0C0"
elif sys.argv[1]=="on4":
  MSG_ACTION = "90D0"
elif sys.argv[1]=="off4":
  MSG_ACTION = "80E0"
elif sys.argv[1]=="ona":
  MSG_ACTION = "2040"
elif sys.argv[1]=="offa":
  MSG_ACTION = "1050"
else:
  raise ValueError('no known action')  

message = MSG_ID + MSG_ACTION + MSG_UNKNOWN_PADDING + MSG_FRAME + MSG_FIN
print message

# find our device
dev = usb.core.find(idVendor=0xffff, idProduct=0x1122)

# was it found?
if dev is None:
	raise ValueError('Device not found')

# was it found?
if dev is None:
  raise ValueError('Device not found')

# set the active configuration. With no arguments, the first
# configuration will be the active one
dev.set_configuration()

# get an endpoint instance
cfg = dev.get_active_configuration()
interface_number = cfg[(0,0)].bInterfaceNumber
alternate_setting = usb.control.get_interface(dev, interface_number)
intf = usb.util.find_descriptor(
  cfg, bInterfaceNumber = interface_number,
  bAlternateSetting = alternate_setting
)

ep = usb.util.find_descriptor(
  intf,
  # match the first OUT endpoint
  custom_match = \
  lambda e: \
    usb.util.endpoint_direction(e.bEndpointAddress) == \
    usb.util.ENDPOINT_OUT
)

assert ep is not None

# write the data
ep.write(binascii.a2b_hex(message))

